using NTech.Legacy.Module.Shared.Infrastructure;
using NTech.Services.Infrastructure;
using nUser.DbModel;
using NWebsec.Csp;
using StackExchange.Profiling;
using System;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace nUser
{
    public class MvcApplication : HttpApplication
    {
        public override void Init()
        {
            base.Init();
            NTechHttpHardening.HandleCachingAndInformationLeakHeader(this, false);
        }

        private void Application_Start(object sender, EventArgs e)
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            NTechHardenedMvcModelBinder.Register(NEnv.CurrentServiceName);
            GlobalFilters.Filters.Add(new NTechHandleErrorAttribute());
            GlobalFilters.Filters.Add(new NTechAuthorizeAndPermissionsAttribute());
            GlobalFilters.Filters.Add(new ConvertJsonToCamelCaseActionFilterAttribute());
            GlobalContentSecurityPolicyFilters.RegisterGlobalFilters(GlobalFilters.Filters);

            if (NEnv.IsProfilerEnabled)
            {
                //Fined requests here: http://localhost:2635/mini-profiler-resources/results-index
                MiniProfiler.Settings.Results_List_Authorize = x => true;
                StackExchange.Profiling.EntityFramework6.MiniProfilerEF6.Initialize();
            }
            else
            {
                MiniProfiler.Settings.ProfilerProvider = new DisabledProvider();
            }

            UsersContext.InitDatabase();
        }

        private class DisabledProvider : IProfilerProvider
        {
            public MiniProfiler GetCurrentProfiler()
            {
                return null;
            }

            public MiniProfiler Start(ProfileLevel level, string sessionName = null)
            {
                return null;
            }

            public void Stop(bool discardResults)
            {
            }
        }

        protected void Application_BeginRequest()
        {
            if (NEnv.IsProfilerEnabled)
            {
                MiniProfiler.Start();
            }
        }

        private void Application_EndRequest()
        {
            if (NEnv.IsProfilerEnabled)
            {
                MiniProfiler.Stop();
            }
        }

        /// <summary>
        /// Endpoint generated using NWebSec to catch reports of CSP-violations and log to file.
        /// Will be triggered by (autogenerated): report-uri /WebResource.axd?cspReport=true
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void NWebsecHttpHeaderSecurityModule_CspViolationReported(object sender, CspViolationReportEventArgs e)
        {
            var violationReport = e.ViolationReport;
            var logFolder = NEnv.LogFolder;
            GlobalContentSecurityPolicyFilters.LogToFile(violationReport, logFolder);
        }
    }
}